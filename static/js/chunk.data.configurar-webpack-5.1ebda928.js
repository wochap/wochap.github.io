(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{417:function(s,a){s.exports={frontMatter:{slug:"configurar-webpack-5",fileName:"configurar-webpack-5",readingTime:"☕️ 7 minutos de lectura",wordCount:1337,identifier:"blog-1",date:"09-04-2020",dateModified:"12-04-2020",formattedDate:"Abril 2020",imageCaption:"webpack",imageUrl:"//res.cloudinary.com/wochap/image/upload/v1586536747/wochap/hero/configurando_webpack.png",heroImageUrl:"//res.cloudinary.com/wochap/image/upload/v1586536747/wochap/hero/configurando_webpack.png",title:"Configurar webpack 5",description:"Aprende a configurar webpack 5 con babel, ¡Actualizate Aquí Ahora!",tags:["webpack","babel"],keywords:["webpack","webpack 5","babel","webpack-dev-server"]},bodyHtml:"<p>Configurar webpack puede ser frustrante...<div class=tenor-gif-embed data-aspect-ratio=1.7785714285714287 data-postid=5384575 data-share-method=host data-width=100%><a href=https://tenor.com/view/fuck-work-gif-5384575>Fuckwork Angry GIF</a> from <a href=https://tenor.com/search/fuckwork-gifs>Fuckwork GIFs</a></div><br><p>Por ello en esta guía te enseñare como configurar <a href=https://webpack.js.org/concepts/ rel=nofollow target=_blank>webpack 5</a> con babel, si deseas ver la configuración final haz click <a href=#configuracion-final>aquí</a> y <a href=https://github.com/wochap/setup-webpack-5 rel=nofollow target=_blank>aquí</a> para ir al repo.<blockquote><p>al día de hoy (9 de abril del 2020) <a href=https://webpack.js.org/concepts/hot-module-replacement/ rel=nofollow target=_blank>HMR (hot module replacement)</a> no funciona con <strong>html-webpack-plugin</strong>, y tambien hay algunos plugins que no funcionaran (por el momento) ya que la API interna cambio bastante en webpack 5</blockquote><h2 id=nuestra-meta>Nuestra meta</h2><p>Tener un solo archivo de configuración <code>webpack.config.js</code> para <code>production</code> y <code>development</code>, configurar <a href=https://babeljs.io/ rel=nofollow target=_blank>babel</a> para que inserte <a href=https://developer.mozilla.org/es/docs/Glossary/Polyfill rel=nofollow target=_blank>polyfills</a> y transforme nuestro código JS a JS que entiendan nuestros <code>target browsers</code>.<h2 id=requerimientos>Requerimientos</h2><ul><li>Saber lo basico de <a href=https://nodejs.org/ rel=nofollow target=_blank>NodeJS</a>.</ul><h2 id=empecemos>Empecemos</h2><h3 id=pasos-para-configurar-webpack-5>Pasos para configurar webpack 5</h3><ol><li><h4 id=instalar-dependencias>Instalar dependencias</h4><p>Webpack<ul><li>webpack - v5.0.0-beta.13<li>webpack-cli - v3.3.11 - <em>permite usar webpack en la terminal</em><li>webpack-dev-server - v3.10.3 - <em>crea un servidor express para poder hacer uso de HMR</em></ul><p>Webpack loaders<ul><li>css-loader - v3.4.2 - <em>permite importar archivos CSS a nuestros JS</em><li>postcss-loader - v3.0.0 - <em>permite aplicar plugins de <a href=https://postcss.org/ rel=nofollow target=_blank>postcss</a> a nuestros CSS</em><li>style-loader - v1.1.3 - <em>agrega una etiqueta <code>style</code> en el DOM por cada CSS que importemos en nuestros JS</em><li>babel-loader - v8.1.0 - <em>permite aplicar babel a todos nuestros JS</em></ul><p>Webpack plugins<ul><li>clean-webpack-plugin - v3.0.0 - <em>eliminara la carpeta dist en cada production build</em><li>html-webpack-plugin - v4.0.4 - <em>inserta en el archivo html que le indiques todos tus imports (script, style, link, etc)</em><li>mini-css-extract-plugin - v0.9.0 - <em>agrega una etiqueta <code>link</code> en el DOM por cada CSS que importemos en nuestros JS</em></ul><p>Babel<ul><li>@babel/core - v7.9.0<li>@babel/plugin-transform-runtime - v7.9.0 - <em>encargado de agregar los polyfills</em><li>@babel/preset-env - v7.9.0 - <em>encargado de transformar nuestro código JS a JS entendible por nuestros <code>target browsers</code></em><li>@babel/runtime-corejs3 - v7.9.2 - <em>modulo que contiene los polyfills</em></ul><p>Postcss plugins<ul><li>autoprefixer - v9.7.5 - <em>insertara prefijos (-webkit-) segun lo requieran nuestros <code>target browsers</code></em></ul><li><h4 id=agregar-nuestros-tasks-en-packagejson>Agregar nuestros tasks en package.json</h4><p>En development, usaremos el comando <code>npm run dev</code> y para production <code>npm run build</code>.<pre><code class=language-json>{\n  <span class=hljs-attr>\"scripts\"</span>: {\n    <span class=hljs-attr>\"build\"</span>: <span class=hljs-string>\"webpack --mode production\"</span>, <span class=hljs-comment>// corre webpack con la configuracion para production, con ello webpack sera capaz de analizar, comprimir, y quitar código innecesario.</span>\n    <span class=hljs-attr>\"dev\"</span>: <span class=hljs-string>\"webpack-dev-server --mode development\"</span> <span class=hljs-comment>// para hacer uso del famoso HMR necesitamos un servidor en nodejs, webpack-dev-server lo creara por nosotros</span>\n  }\n}\n</code></pre><li><h4 id=crear-nuestro-archivo-browserslistrc>Crear nuestro archivo <a href=https://github.com/browserslist/browserslist#browserslist- rel=nofollow target=_blank><code>.browserslistrc</code></a></h4><p>En este archivo indicamos nuestros <code>target browsers</code>, los navegadores que soportaremos. <a href=https://babeljs.io/docs/en/babel-preset-env rel=nofollow target=_blank>Babel</a> y <a href=https://autoprefixer.github.io/ rel=nofollow target=_blank>Autoprefixer</a> usaran este archivo si lo encuentran en la raiz del proyecto.<pre><code><span class=hljs-comment># .browserslistrc</span>\n\n<span class=hljs-meta>></span> <span class=hljs-string>1%</span>\n<span class=hljs-attr>last</span> <span class=hljs-string>2 versions</span>\n<span class=hljs-attr>not</span> <span class=hljs-string>dead</span>\n<span class=hljs-attr>not</span> <span class=hljs-string>IE 11</span>\n<span class=hljs-attr>not</span> <span class=hljs-string>IE 10</span>\n</code></pre><li><h4 id=crear-nuestro-archivo-babelrc>Crear nuestro archivo <code>.babelrc</code></h4><p>Con esto babel sera capaz de insertar polyfills y transformar JS donde se requiera segun nuestro <code>target browsers</code>.<pre><code class=language-json>{\n  <span class=hljs-attr>\"presets\"</span>: [[<span class=hljs-string>\"@babel/preset-env\"</span>]],\n  <span class=hljs-attr>\"plugins\"</span>: [\n    [\n      <span class=hljs-string>\"@babel/plugin-transform-runtime\"</span>,\n      {\n        <span class=hljs-attr>\"corejs\"</span>: <span class=hljs-number>3</span>\n      }\n    ]\n  ]\n}\n</code></pre><li><h4 id=crear-nuestro-archivo-postcssconfigjs>Crear nuestro archivo <code>postcss.config.js</code></h4><p><code>postcss-loader</code> usara esta configuracion, solo usaremos el plugin de autoprefixer.<pre><code class=language-js><span class=hljs-built_in>module</span>.exports = {\n  <span class=hljs-attr>plugins</span>: {\n    <span class=hljs-attr>autoprefixer</span>: {},\n  },\n}\n</code></pre><li><h4 id=crear-nuestro-archivo-webpackconfigjs>Crear nuestro archivo <code>webpack.config.js</code></h4><div class=tenor-gif-embed data-aspect-ratio=1.7744360902255638 data-postid=10383696 data-share-method=host data-width=100%><a href=https://tenor.com/view/ahora-si-viene-lo-chido-gif-10383696>Ahora Si GIF</a> from <a href=https://tenor.com/search/ahora-gifs>Ahora GIFs</a></div><br><p>Empezemos por importar algunos modulos, mas <a href=#1-instalar-dependencias>arriba</a> explique que hace cada modulo.<pre><code class=language-js><span class=hljs-keyword>const</span> path = <span class=hljs-built_in>require</span>(<span class=hljs-string>'path'</span>)\n<span class=hljs-keyword>const</span> webpack = <span class=hljs-built_in>require</span>(<span class=hljs-string>'webpack'</span>)\n<span class=hljs-keyword>const</span> HtmlWebpackPlugin = <span class=hljs-built_in>require</span>(<span class=hljs-string>'html-webpack-plugin'</span>)\n<span class=hljs-keyword>const</span> {CleanWebpackPlugin} = <span class=hljs-built_in>require</span>(<span class=hljs-string>'clean-webpack-plugin'</span>)\n<span class=hljs-keyword>const</span> MiniCssExtractPlugin = <span class=hljs-built_in>require</span>(<span class=hljs-string>'mini-css-extract-plugin'</span>)\n</code></pre><p>El archivo <code>webpack.config.js</code> debe exportar un objeto o una funcion devolviendo un objeto, usaremos la segunda, ya que de esta manera podremos saber si estamos en <code>development</code> o <code>production</code>.<pre><code class=language-js><span class=hljs-keyword>const</span> config = {}\n<span class=hljs-built_in>module</span>.exports = <span class=hljs-function>(<span class=hljs-params>env, argv</span>) =></span> {\n  <span class=hljs-keyword>if</span> (argv.mode === <span class=hljs-string>'development'</span>) {\n    <span class=hljs-comment>// <span class=hljs-doctag>TODO:</span> usar style-loader, es lo recomendado para usar HMR</span>\n    <span class=hljs-comment>// <span class=hljs-doctag>TODO:</span> habilitar HMR plugin</span>\n  }\n\n  <span class=hljs-keyword>if</span> (argv.mode === <span class=hljs-string>'production'</span>) {\n    <span class=hljs-comment>// <span class=hljs-doctag>TODO:</span> insertar `contenthash` en los archivos de salida, esto para tener `long term caching`</span>\n    <span class=hljs-comment>// <span class=hljs-doctag>TODO:</span> usar MiniCssExtractPlugin, para extraer todo nuestro CSS a un archivo CSS, de lo contrario nuestro CSS quedaria en los archivos JS</span>\n  }\n  <span class=hljs-keyword>return</span> config\n}\n</code></pre><p>La configuracion en comun que tiene <code>production</code> y <code>development</code> estara en el objeto <code>config</code>.<pre><code class=language-js><span class=hljs-keyword>const</span> config = {\n  <span class=hljs-comment>// el punto de entrada de nuestra APP, JS que se ejecutara en el BROWSER</span>\n  <span class=hljs-attr>entry</span>: <span class=hljs-string>'./src/index.js'</span>,\n  <span class=hljs-attr>output</span>: {\n    <span class=hljs-comment>// el nombre que le daremos al archivo de salida principal</span>\n    <span class=hljs-attr>filename</span>: <span class=hljs-string>'main.js'</span>,\n\n    <span class=hljs-comment>// donde se crearan los archivos de salida</span>\n    <span class=hljs-attr>path</span>: path.resolve(__dirname, <span class=hljs-string>'dist'</span>),\n  },\n\n  <span class=hljs-comment>// configuracion para webpack-dev-server</span>\n  <span class=hljs-attr>devServer</span>: {\n    <span class=hljs-comment>// abrir la APP en el BROWSER</span>\n    <span class=hljs-attr>open</span>: <span class=hljs-literal>true</span>,\n\n    <span class=hljs-comment>// HACK para permitir ver la APP desde otros dispositivos</span>\n    <span class=hljs-attr>host</span>: <span class=hljs-string>'0.0.0.0'</span>,\n\n    <span class=hljs-comment>// ver el progreso de compilacion en la consola</span>\n    <span class=hljs-attr>progress</span>: <span class=hljs-literal>true</span>,\n\n    <span class=hljs-comment>// esto para que todas las URLs que fallen (404) devuelvan nuestro index.html</span>\n    <span class=hljs-attr>historyApiFallback</span>: <span class=hljs-literal>true</span>,\n\n    <span class=hljs-comment>// para que los errores en consola aparescan en un overlay en el BROWSER</span>\n    <span class=hljs-attr>overlay</span>: <span class=hljs-literal>true</span>,\n\n    <span class=hljs-comment>// habilitar HMR</span>\n    <span class=hljs-attr>hot</span>: <span class=hljs-literal>true</span>,\n  },\n  <span class=hljs-attr>resolve</span>: {\n    <span class=hljs-attr>alias</span>: {\n      <span class=hljs-comment>// un alias que apunta a la carpeta `src/components`</span>\n      <span class=hljs-string>'@components'</span>: path.resolve(__dirname, <span class=hljs-string>'src/components'</span>),\n    },\n  },\n  <span class=hljs-attr>module</span>: {\n    <span class=hljs-attr>rules</span>: [\n      {\n        <span class=hljs-comment>// a que archivos afectara esta regla</span>\n        <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.js$/</span>,\n\n        <span class=hljs-comment>// los loaders que apliquemos en la regla no afectaran</span>\n        <span class=hljs-comment>// a archivos que coincidan con</span>\n        exclude: <span class=hljs-regexp>/(node_modules|bower_components)/</span>,\n\n        use: {\n          <span class=hljs-comment>// el nombre  del loader que usaremos</span>\n          <span class=hljs-attr>loader</span>: <span class=hljs-string>'babel-loader'</span>,\n          <span class=hljs-attr>options</span>: {\n            <span class=hljs-comment>// mejora la velocidad de compilacion</span>\n            <span class=hljs-comment>// si en algun momento no se ven reflejados tus cambios</span>\n            <span class=hljs-comment>// elimina la carpeta `node_modules/.cache`</span>\n            <span class=hljs-attr>cacheDirectory</span>: <span class=hljs-literal>true</span>,\n          },\n        },\n      },\n    ],\n  },\n  <span class=hljs-attr>plugins</span>: [\n    <span class=hljs-keyword>new</span> CleanWebpackPlugin(),\n    <span class=hljs-keyword>new</span> HtmlWebpackPlugin({\n      <span class=hljs-comment>// la ruta donde se encuentra nuestro index.html</span>\n      <span class=hljs-comment>// para que HtmlWebpackPlugin lo use</span>\n      <span class=hljs-attr>template</span>: <span class=hljs-string>'src/index.html'</span>,\n    }),\n  ],\n}\n</code></pre><p>Ahora solo falta completar nuestros TODOs<pre><code class=language-js><span class=hljs-built_in>module</span>.exports = <span class=hljs-function>(<span class=hljs-params>env, argv</span>) =></span> {\n  <span class=hljs-keyword>if</span> (argv.mode === <span class=hljs-string>'development'</span>) {\n    <span class=hljs-comment>// nuestra regla para poder importar archivos CSS</span>\n    config.module.rules.push({\n      <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.css$/</span>,\n\n      <span class=hljs-comment>// el primer loader en aplicarse es el ultimo, en este caso `postcss-loader`</span>\n      use: [<span class=hljs-string>'style-loader'</span>, <span class=hljs-string>'css-loader'</span>, <span class=hljs-string>'postcss-loader'</span>],\n    })\n    config.plugins.push(\n      <span class=hljs-comment>// con esto ya habilitamos HMR</span>\n      <span class=hljs-keyword>new</span> webpack.HotModuleReplacementPlugin(),\n    )\n  }\n\n  <span class=hljs-keyword>if</span> (argv.mode === <span class=hljs-string>'production'</span>) {\n    <span class=hljs-comment>// webpack reemplazara [name] con el nombre del archivo que importamos, ///</span>\n    <span class=hljs-comment>// [contenthash:8] sera reemplazado por un hash de 8 digitos que cambia segun el contenido del archivo</span>\n    <span class=hljs-comment>// aplicar long term caching a los archivos resultantes JS</span>\n    config.output.filename = <span class=hljs-string>'static/js/bundle.[name].[contenthash:8].js'</span>\n    config.output.chunkFilename = <span class=hljs-string>'static/js/chunk.[name].[contenthash:8].js'</span>\n\n    <span class=hljs-comment>// nuestra regla para extraer los archivos CSSs en sus propios archivos</span>\n    config.module.rules.push({\n      <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.css$/</span>,\n      use: [MiniCssExtractPlugin.loader, <span class=hljs-string>'css-loader'</span>, <span class=hljs-string>'postcss-loader'</span>],\n    })\n    config.plugins.push(\n      <span class=hljs-keyword>new</span> MiniCssExtractPlugin({\n        <span class=hljs-comment>// aplicar long term caching a los archivos resultantes CSS</span>\n        <span class=hljs-attr>filename</span>: <span class=hljs-string>'static/css/bundle.[name].[contenthash:8].css'</span>,\n        <span class=hljs-attr>chunkFilename</span>: <span class=hljs-string>'static/css/chunk.[name].[contenthash:8].css'</span>,\n      }),\n    )\n  }\n  <span class=hljs-keyword>return</span> config\n}\n</code></pre></ol><p>Con esto ya tienes una configuracion bien estandar, si trabajas con vue puedes continuar <a href=https://vue-loader.vuejs.org/ rel=nofollow target=_blank>aquí</a>, o si trabajas con react agrega este preset <a href=https://babeljs.io/docs/en/babel-preset-react rel=nofollow target=_blank>@babel/preset-react</a> a la configuracion de babel.<h2 id=configuracion-final>Configuracion final</h2><pre><code class=language-js><span class=hljs-comment>// webpack.config.js</span>\n\n<span class=hljs-keyword>const</span> path = <span class=hljs-built_in>require</span>(<span class=hljs-string>'path'</span>)\n<span class=hljs-keyword>const</span> webpack = <span class=hljs-built_in>require</span>(<span class=hljs-string>'webpack'</span>)\n<span class=hljs-keyword>const</span> HtmlWebpackPlugin = <span class=hljs-built_in>require</span>(<span class=hljs-string>'html-webpack-plugin'</span>)\n<span class=hljs-keyword>const</span> {CleanWebpackPlugin} = <span class=hljs-built_in>require</span>(<span class=hljs-string>'clean-webpack-plugin'</span>)\n<span class=hljs-keyword>const</span> MiniCssExtractPlugin = <span class=hljs-built_in>require</span>(<span class=hljs-string>'mini-css-extract-plugin'</span>)\n\n<span class=hljs-keyword>const</span> config = {\n  <span class=hljs-attr>entry</span>: <span class=hljs-string>'./src/index.js'</span>,\n  <span class=hljs-attr>output</span>: {\n    <span class=hljs-attr>filename</span>: <span class=hljs-string>'main.js'</span>,\n    <span class=hljs-attr>path</span>: path.resolve(__dirname, <span class=hljs-string>'dist'</span>),\n  },\n  <span class=hljs-attr>devServer</span>: {\n    <span class=hljs-attr>open</span>: <span class=hljs-literal>true</span>,\n    <span class=hljs-attr>host</span>: <span class=hljs-string>'0.0.0.0'</span>,\n    <span class=hljs-attr>progress</span>: <span class=hljs-literal>true</span>,\n    <span class=hljs-attr>historyApiFallback</span>: <span class=hljs-literal>true</span>,\n    <span class=hljs-attr>overlay</span>: <span class=hljs-literal>true</span>,\n    <span class=hljs-attr>hot</span>: <span class=hljs-literal>true</span>,\n  },\n  <span class=hljs-attr>resolve</span>: {\n    <span class=hljs-attr>alias</span>: {\n      <span class=hljs-string>'@components'</span>: path.resolve(__dirname, <span class=hljs-string>'src/components'</span>),\n    },\n  },\n  <span class=hljs-attr>module</span>: {\n    <span class=hljs-attr>rules</span>: [\n      {\n        <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.js$/</span>,\n        exclude: <span class=hljs-regexp>/(node_modules|bower_components)/</span>,\n        use: {\n          <span class=hljs-attr>loader</span>: <span class=hljs-string>'babel-loader'</span>,\n          <span class=hljs-attr>options</span>: {\n            <span class=hljs-attr>cacheDirectory</span>: <span class=hljs-literal>true</span>,\n          },\n        },\n      },\n    ],\n  },\n  <span class=hljs-attr>plugins</span>: [\n    <span class=hljs-keyword>new</span> CleanWebpackPlugin(),\n    <span class=hljs-keyword>new</span> HtmlWebpackPlugin({\n      <span class=hljs-attr>template</span>: <span class=hljs-string>'src/index.html'</span>,\n    }),\n  ],\n}\n\n<span class=hljs-built_in>module</span>.exports = <span class=hljs-function>(<span class=hljs-params>env, argv</span>) =></span> {\n  <span class=hljs-keyword>if</span> (argv.mode === <span class=hljs-string>'development'</span>) {\n    config.module.rules.push({\n      <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.css$/</span>,\n      use: [<span class=hljs-string>'style-loader'</span>, <span class=hljs-string>'css-loader'</span>, <span class=hljs-string>'postcss-loader'</span>],\n    })\n    config.plugins.push(<span class=hljs-keyword>new</span> webpack.HotModuleReplacementPlugin())\n  }\n\n  <span class=hljs-keyword>if</span> (argv.mode === <span class=hljs-string>'production'</span>) {\n    config.output.filename = <span class=hljs-string>'static/js/bundle.[name].[contenthash:8].js'</span>\n    config.output.chunkFilename = <span class=hljs-string>'static/js/chunk.[name].[contenthash:8].js'</span>\n    config.module.rules.push({\n      <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.css$/</span>,\n      use: [MiniCssExtractPlugin.loader, <span class=hljs-string>'css-loader'</span>, <span class=hljs-string>'postcss-loader'</span>],\n    })\n    config.plugins.push(\n      <span class=hljs-keyword>new</span> MiniCssExtractPlugin({\n        <span class=hljs-attr>filename</span>: <span class=hljs-string>'static/css/bundle.[name].[contenthash:8].css'</span>,\n        <span class=hljs-attr>chunkFilename</span>: <span class=hljs-string>'static/css/chunk.[name].[contenthash:8].css'</span>,\n      }),\n    )\n  }\n  <span class=hljs-keyword>return</span> config\n}\n</code></pre><h2 id=referencias>Referencias</h2><ul><li><a href=https://www.zzuu666.com/articles/9 rel=nofollow target=_blank>https://www.zzuu666.com/articles/9</a><li><a href=https://webpack.js.org/configuration/mode/#root rel=nofollow target=_blank>https://webpack.js.org/configuration/mode/#root</a><li><a href=https://developers.google.com/web/fundamentals/performance/webpack/use-long-term-caching rel=nofollow target=_blank>https://developers.google.com/web/fundamentals/performance/webpack/use-long-term-caching</a></ul>"}}}]);
//# sourceMappingURL=chunk.data.configurar-webpack-5.1ebda928.js.map