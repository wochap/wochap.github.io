{"version":3,"sources":["webpack:///../data/posts/dart-para-javascript-developers.md?e8db"],"names":["module","exports"],"mappings":"2EAAAA,EAAOC,QAAU,CAAC,YAAc,CAAC,KAAO,kCAAkC,SAAW,kCAAkC,YAAc,0BAA0B,UAAY,KAAK,WAAa,SAAS,KAAO,aAAa,aAAe,aAAa,cAAgB,aAAa,aAAe,4BAA4B,SAAW,gFAAgF,aAAe,gFAAgF,MAAQ,kCAAkC,YAAc,8DAA8D,KAAO,CAAC,QAAQ,SAAW,CAAC,OAAO,kBAAkB,SAAW","file":"static/js/chunk.data.dart-para-javascript-developers.c0673889.js","sourcesContent":["module.exports = {\"frontMatter\":{\"slug\":\"dart-para-javascript-developers\",\"fileName\":\"dart-para-javascript-developers\",\"readingTime\":\"☕️ 8 minutos de lectura\",\"wordCount\":1410,\"identifier\":\"blog-4\",\"date\":\"24-04-2020\",\"dateModified\":\"24-04-2020\",\"formattedDate\":\"Abril 2020\",\"imageCaption\":\"logo de dart y javascript\",\"imageUrl\":\"//res.cloudinary.com/wochap/image/upload/v1587759087/wochap/hero/js-dart.webp\",\"heroImageUrl\":\"//res.cloudinary.com/wochap/image/upload/v1587759087/wochap/hero/js-dart.webp\",\"title\":\"Dart para Javascript developers\",\"description\":\"Aprende Dart si ya sabes JavaScript en menos de 8 minutos!'\",\"tags\":[\"dart\"],\"keywords\":[\"dart\",\"aprender dart\"]},\"bodyHtml\":\"<p>Guía para aprender Dart si ya sabes Javascript.<p>A la izquierda codigo Javascript y a su derecha el codigo \\\"posiblemente\\\" equivalente en Dart.<h2 id=diferencias-y-similitudes-entre-javascript-y-dart>Diferencias y similitudes entre JavaScript y Dart</h2><p>Para empezar, Dart es tipado y tu codigo de arranque debe encontrarse dentro de una funcion <code>main</code>.<pre><code class=language-dart>main() {\\n  <span class=hljs-built_in>print</span>(<span class=hljs-string>'hello world'</span>);\\n}\\n</code></pre><p>En los siguientes ejemplos voy a obviar poner codigo dentro de la funcion <code>main</code>.<h3 id=asignacion-de-variables><div align=center>Asignacion de variables</div></h3><p>En este apartado javascript y Dart son diferentes, en Dart una vez asginas un valor a una variable, el tipo de valor no puede cambiar a menos que lo hayas declarado con el keyword <code>dynamic</code>.<div class=c-markdown-code-compare><pre><code class=language-js><span class=hljs-keyword>var</span> name = <span class=hljs-string>'Pepe'</span> <span class=hljs-comment>// puede ser reasignado con cualquier otro valor</span>\\n<span class=hljs-keyword>let</span> name = <span class=hljs-string>'Pepe'</span> <span class=hljs-comment>// puede ser reasignado con cualquier otro valor</span>\\n<span class=hljs-keyword>const</span> name = <span class=hljs-string>'Pepe'</span> <span class=hljs-comment>// no puede ser reasignado</span>\\n\\n\\n\\n\\n</code></pre><pre><code class=language-dart>\\n\\n\\n<span class=hljs-built_in>dynamic</span> name = <span class=hljs-string>'Pepe'</span>; <span class=hljs-comment>// puede ser reasignado con cualquier otro valor</span>\\n<span class=hljs-keyword>var</span> name = <span class=hljs-string>'Pepe'</span>; <span class=hljs-comment>// puede ser reasignado con valores del mismo tipo, en este caso con otro String</span>\\n<span class=hljs-keyword>final</span> <span class=hljs-built_in>String</span> name = <span class=hljs-string>'Pepe'</span>; <span class=hljs-comment>// no puede ser reasignado, su valor es resuelta en tiempo de ejecucion</span>\\n<span class=hljs-keyword>const</span> <span class=hljs-built_in>String</span> name = <span class=hljs-string>'Pepe'</span>; <span class=hljs-comment>// no puede ser reasignado, su valor es resuelta en tiempo de compilacion</span>\\n</code></pre></div><h3 id=boolean><div align=center>Boolean</div></h3><p><strong>IMPORTANTE:</strong> en Dart los operadores logicos <code>&#38&amp</code> <code>||</code> <code>!</code> solo pueden ser aplicados con valores <code>boolean</code> y las expresiones creadas con esos operadores logicos no devuelven el ultimo valor encontrado como sucede en JavaScript.<div class=c-markdown-code-compare><pre><code class=language-js><span class=hljs-keyword>var</span> isOpen = <span class=hljs-literal>true</span>\\nisOpen = <span class=hljs-literal>false</span>\\n\\n<span class=hljs-built_in>console</span>.log(<span class=hljs-number>5</span> || isOpen) <span class=hljs-comment>// 5</span>\\n<span class=hljs-built_in>console</span>.log(<span class=hljs-number>5</span> &#38&#38 isOpen) <span class=hljs-comment>// false</span>\\n<span class=hljs-built_in>console</span>.log(!isOpen) <span class=hljs-comment>// true</span>\\n<span class=hljs-built_in>console</span>.log(<span class=hljs-number>5</span> !== isOpen) <span class=hljs-comment>// true</span>\\n</code></pre><pre><code class=language-dart><span class=hljs-built_in>bool</span> isOpen = <span class=hljs-keyword>true</span>;\\nisOpen = <span class=hljs-keyword>false</span>;\\n\\n<span class=hljs-built_in>print</span>(<span class=hljs-number>5</span> || isOpen); <span class=hljs-comment>// Error</span>\\n<span class=hljs-built_in>print</span>(<span class=hljs-number>5</span> &#38&#38 isOpen); <span class=hljs-comment>// Error</span>\\n<span class=hljs-built_in>print</span>(!isOpen) ; <span class=hljs-comment>// true</span>\\n<span class=hljs-built_in>print</span>(<span class=hljs-number>5</span> != isOpen); <span class=hljs-comment>// true</span>\\n</code></pre></div><h3 id=string><div align=center>String</div></h3><p>En Dart, usas <code>'</code> para strings de una sola linea, y <code>'''</code> para strings multilinea, tambien puedes escapar cualquier caracter en un string anteponiendo una <code>r</code>.<div class=c-markdown-code-compare><pre><code class=language-js><span class=hljs-keyword>var</span> name = <span class=hljs-string>'Pepito'</span>\\n\\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>`i am <span class=hljs-subst>${name}</span> <span class=hljs-subst>${<span class=hljs-number>5</span>}</span> years old.`</span>) <span class=hljs-comment>// i am Pepito 5 years old.</span>\\n\\n<span class=hljs-built_in>console</span>.log(name.toUpperCase()) <span class=hljs-comment>// PEPITO</span>\\n<span class=hljs-built_in>console</span>.log(name.length) <span class=hljs-comment>// 6</span>\\n</code></pre><pre><code class=language-dart><span class=hljs-built_in>String</span> name = <span class=hljs-string>'Pepito'</span>;\\n\\n<span class=hljs-built_in>print</span>(<span class=hljs-string>'''i am <span class=hljs-subst>$name</span> <span class=hljs-subst>${<span class=hljs-number>5</span>}</span> years old.'''</span>); <span class=hljs-comment>// i am Pepito 5 years old.</span>\\n<span class=hljs-built_in>print</span>(<span class=hljs-string>r'i am $name ${5} years old.'</span>); <span class=hljs-comment>// i am $name ${5} years old.</span>\\n<span class=hljs-built_in>print</span>(name.toUpperCase()); <span class=hljs-comment>// PEPITO</span>\\n<span class=hljs-built_in>print</span>(name.length); <span class=hljs-comment>// 6</span>\\n</code></pre></div><h3 id=number><div align=center>Number</div></h3><p>En Dart existen 3 tipos para numeros: <code>num</code> <code>double</code> <code>int</code>, en mi experiencia puedes usar cualquiera y no notaras la diferencia.<div class=c-markdown-code-compare><pre><code class=language-js><span class=hljs-keyword>var</span> height = <span class=hljs-number>5</span>\\n<span class=hljs-keyword>var</span> width = <span class=hljs-number>2.5</span>\\n\\n<span class=hljs-built_in>console</span>.log(<span class=hljs-keyword>typeof</span> height) <span class=hljs-comment>// number</span>\\n</code></pre><pre><code class=language-dart><span class=hljs-built_in>int</span> height = <span class=hljs-number>5</span>;\\n<span class=hljs-built_in>double</span> width = <span class=hljs-number>2.5</span>;\\n\\n<span class=hljs-built_in>print</span>(height.runtimeType); <span class=hljs-comment>// int</span>\\n</code></pre></div><h3 id=array---list><div align=center>Array - List</div></h3><div class=c-markdown-code-compare><pre><code class=language-js>\\n\\n<span class=hljs-keyword>var</span> numbers = [<span class=hljs-number>1</span>, <span class=hljs-number>2</span>, <span class=hljs-number>3</span>, <span class=hljs-number>4</span>]\\nnumbers = [...numbers, <span class=hljs-number>5</span>]\\nnumbers = [...numbers.slice(<span class=hljs-number>0</span>, <span class=hljs-number>1</span>), ...[<span class=hljs-number>8</span>, <span class=hljs-number>9</span>], ...numbers.slice(<span class=hljs-number>4</span>)]\\n\\n<span class=hljs-built_in>console</span>.log(numbers) <span class=hljs-comment>// [1, 8, 9, 5]</span>\\n<span class=hljs-built_in>console</span>.log(numbers.slice(<span class=hljs-number>1</span>, <span class=hljs-number>3</span>)) <span class=hljs-comment>// [8, 9]</span>\\n\\n<span class=hljs-comment>// no hay algo como list comprehension en javascript</span>\\nnumbers = numbers.filter(<span class=hljs-function><span class=hljs-params>x</span> =></span> x % <span class=hljs-number>2</span> === <span class=hljs-number>0</span>).map(<span class=hljs-function><span class=hljs-params>x</span> =></span> x ** <span class=hljs-number>2</span>)\\n<span class=hljs-built_in>console</span>.log(numbers) <span class=hljs-comment>// [64]</span>\\n\\n<span class=hljs-comment>// destructuring assignment</span>\\n<span class=hljs-keyword>const</span> [n] = numbers\\n<span class=hljs-built_in>console</span>.log(n)\\n</code></pre><pre><code class=language-dart><span class=hljs-keyword>import</span> <span class=hljs-string>'dart:math'</span>; <span class=hljs-comment>// para hacer uso de pow</span>\\n\\n<span class=hljs-built_in>List</span>&lt;<span class=hljs-built_in>int</span>> numbers = [<span class=hljs-number>1</span>, <span class=hljs-number>2</span>, <span class=hljs-number>3</span>, <span class=hljs-number>4</span>];\\nnumbers = [...numbers, <span class=hljs-number>5</span>];\\nnumbers = [...numbers.sublist(<span class=hljs-number>0</span>, <span class=hljs-number>1</span>), ...[<span class=hljs-number>8</span>, <span class=hljs-number>9</span>], ...numbers.sublist(<span class=hljs-number>4</span>)];\\n\\n<span class=hljs-built_in>print</span>(numbers); <span class=hljs-comment>// [1, 8, 9, 5]</span>\\n<span class=hljs-built_in>print</span>(numbers.sublist(<span class=hljs-number>1</span>, <span class=hljs-number>3</span>)); <span class=hljs-comment>// [8, 9]</span>\\n\\n<span class=hljs-comment>// list comprehension</span>\\nnumbers = [<span class=hljs-keyword>for</span> (<span class=hljs-keyword>var</span> x <span class=hljs-keyword>in</span> numbers) <span class=hljs-keyword>if</span> (x % <span class=hljs-number>2</span> == <span class=hljs-number>0</span>) pow(x, <span class=hljs-number>2</span>)];\\n<span class=hljs-built_in>print</span>(numbers); <span class=hljs-comment>// [64]</span>\\n\\n\\n\\n\\n</code></pre></div><h3 id=set><div align=center>Set</div></h3><p>Es como <code>List</code> pero desordenada y no tiene elementos duplicados.<div class=c-markdown-code-compare><pre><code class=language-js><span class=hljs-keyword>var</span> animals = <span class=hljs-keyword>new</span> <span class=hljs-built_in>Set</span>([<span class=hljs-string>'cat'</span>, <span class=hljs-string>'dog'</span>])\\n\\n</code></pre><pre><code class=language-dart><span class=hljs-built_in>Set</span> animals = <span class=hljs-built_in>Set</span>.from([<span class=hljs-string>'cat'</span>, <span class=hljs-string>'dog'</span>]);\\n<span class=hljs-built_in>Set</span> animals = {<span class=hljs-string>'cat'</span>, <span class=hljs-string>'dog'</span>};\\n</code></pre></div><h3 id=object---map><div align=center>Object - Map</div></h3><div class=c-markdown-code-compare><pre><code class=language-js><span class=hljs-keyword>var</span> animals = {<span class=hljs-attr>cat</span>: <span class=hljs-string>'nyan'</span>, <span class=hljs-attr>dog</span>: <span class=hljs-string>'snuffles'</span>}\\n<span class=hljs-built_in>console</span>.log(animals.fish ?? <span class=hljs-string>'N/A'</span>) <span class=hljs-comment>// N/A</span>\\n<span class=hljs-keyword>delete</span> animals.cat\\n\\n<span class=hljs-comment>// no hay algo como object comprehension en javascript</span>\\n<span class=hljs-keyword>var</span> foo = [<span class=hljs-number>1</span>, <span class=hljs-number>2</span>, <span class=hljs-number>3</span>].filter(<span class=hljs-function><span class=hljs-params>x</span> =></span> x % <span class=hljs-number>2</span> === <span class=hljs-number>0</span>).reduce(<span class=hljs-function>(<span class=hljs-params>result, x</span>) =></span> ({...result, [x]: x ** <span class=hljs-number>2</span>}), {})\\n<span class=hljs-built_in>console</span>.log(foo) <span class=hljs-comment>// {2: 4}</span>\\n</code></pre><pre><code class=language-dart><span class=hljs-built_in>Map</span>&lt;<span class=hljs-built_in>String</span>, <span class=hljs-built_in>String</span>> animals = {<span class=hljs-string>'cat'</span>: <span class=hljs-string>'nyan'</span>, <span class=hljs-string>'dog'</span>: <span class=hljs-string>'snuffles'</span>};\\n<span class=hljs-built_in>print</span>(animals[<span class=hljs-string>'fish'</span>] ?? <span class=hljs-string>'N/A'</span>); <span class=hljs-comment>// N/A</span>\\nanimals.remove(<span class=hljs-string>'cat'</span>);\\n\\n<span class=hljs-comment>// object comprehension</span>\\n<span class=hljs-built_in>Map</span>&lt;<span class=hljs-built_in>num</span>, <span class=hljs-built_in>num</span>> foo = {<span class=hljs-keyword>for</span> (<span class=hljs-keyword>var</span> x <span class=hljs-keyword>in</span> [<span class=hljs-number>1</span>, <span class=hljs-number>2</span>, <span class=hljs-number>3</span>]) <span class=hljs-keyword>if</span> (x % <span class=hljs-number>2</span> == <span class=hljs-number>0</span>) x: pow(x, <span class=hljs-number>2</span>)};\\n<span class=hljs-built_in>print</span>(foo); <span class=hljs-comment>// {2: 4}</span>\\n</code></pre></div><h3 id=function><div align=center>Function</div></h3><p>En Dart los parametros de una funcion pueden ser <code>Non-optional</code>, <code>Optional Positional Parameters</code>, <code>Optional Named Parameters</code>.<div class=c-markdown-code-compare><pre><code class=language-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>sum</span>(<span class=hljs-params>a, b = <span class=hljs-number>3</span>, c = <span class=hljs-number>1</span></span>) </span>{\\n  <span class=hljs-built_in>console</span>.log(a + b + c)\\n}\\n\\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>sum2</span>(<span class=hljs-params>a, {b = <span class=hljs-number>3</span>, c = <span class=hljs-number>1</span>} = {}</span>) </span>{\\n  <span class=hljs-built_in>console</span>.log(a + b + c)\\n}\\n\\nsum(<span class=hljs-number>5</span>, <span class=hljs-number>3</span>) <span class=hljs-comment>// 9</span>\\nsum2(<span class=hljs-number>5</span>, {<span class=hljs-attr>c</span>: <span class=hljs-number>2</span>, <span class=hljs-attr>b</span>: <span class=hljs-number>8</span>}) <span class=hljs-comment>// 15</span>\\n</code></pre><pre><code class=language-dart><span class=hljs-built_in>int</span> sum(<span class=hljs-built_in>int</span> a, [<span class=hljs-built_in>int</span> b = <span class=hljs-number>3</span>, <span class=hljs-built_in>int</span> c = <span class=hljs-number>1</span>]) { <span class=hljs-comment>// parametros opcionales b y c</span>\\n  <span class=hljs-built_in>print</span>(a + b + c);\\n}\\n\\n<span class=hljs-built_in>int</span> sum2(<span class=hljs-built_in>int</span> a, {<span class=hljs-built_in>int</span> b = <span class=hljs-number>3</span>, <span class=hljs-built_in>int</span> c = <span class=hljs-number>1</span>}) { <span class=hljs-comment>// parametros opcionales nombrados b y c</span>\\n  <span class=hljs-built_in>print</span>(a + b + c);\\n}\\n\\nsum(<span class=hljs-number>5</span>, <span class=hljs-number>3</span>); <span class=hljs-comment>// 9</span>\\nsum2(<span class=hljs-number>5</span>, c: <span class=hljs-number>2</span>, b: <span class=hljs-number>8</span>); <span class=hljs-comment>// 15</span>\\n</code></pre></div><h3 id=control-flow><div align=center>Control Flow</div></h3><div class=c-markdown-code-compare><pre><code class=language-js><span class=hljs-keyword>if</span> (x > <span class=hljs-number>0</span>) {\\n  <span class=hljs-comment>//</span>\\n} <span class=hljs-keyword>else</span> <span class=hljs-keyword>if</span> (x &#60 <span class=hljs-number>0</span>) {\\n  <span class=hljs-comment>//</span>\\n} <span class=hljs-keyword>else</span> {\\n  <span class=hljs-keyword>return</span> <span class=hljs-string>'zero'</span>\\n}\\n\\n<span class=hljs-keyword>for</span> (<span class=hljs-keyword>const</span> value <span class=hljs-keyword>of</span> [<span class=hljs-string>'a'</span>, <span class=hljs-string>'b'</span>]) {\\n  <span class=hljs-comment>//</span>\\n}\\n\\n<span class=hljs-keyword>for</span> (<span class=hljs-keyword>const</span> [index, value] <span class=hljs-keyword>of</span> [<span class=hljs-number>1</span>, <span class=hljs-number>2</span>, <span class=hljs-number>3</span>].entries()) {\\n  <span class=hljs-comment>//</span>\\n}\\n\\n<span class=hljs-keyword>for</span> (<span class=hljs-keyword>const</span> [key, value] <span class=hljs-keyword>of</span> <span class=hljs-built_in>Object</span>.entries({<span class=hljs-attr>foo</span>: <span class=hljs-string>'bar'</span>})) {\\n  <span class=hljs-comment>//</span>\\n}\\n\\n<span class=hljs-keyword>while</span> (a &#60 <span class=hljs-number>0</span>) {\\n  <span class=hljs-comment>//</span>\\n}\\n</code></pre><pre><code class=language-dart><span class=hljs-keyword>if</span> (x > <span class=hljs-number>0</span>) {\\n  <span class=hljs-comment>//</span>\\n} <span class=hljs-keyword>else</span> <span class=hljs-keyword>if</span> (x &#60 <span class=hljs-number>0</span>) {\\n  <span class=hljs-comment>//</span>\\n} <span class=hljs-keyword>else</span> {\\n  <span class=hljs-keyword>return</span> <span class=hljs-string>'zero'</span>\\n}\\n\\n<span class=hljs-keyword>for</span> (<span class=hljs-built_in>String</span> value <span class=hljs-keyword>in</span> [<span class=hljs-string>'a'</span>, <span class=hljs-string>'b'</span>]) {\\n  <span class=hljs-comment>//</span>\\n}\\n\\n[<span class=hljs-number>1</span>, <span class=hljs-number>2</span>, <span class=hljs-number>3</span>].asMap().forEach((index, value) {\\n  <span class=hljs-comment>//</span>\\n});\\n\\n({<span class=hljs-string>'foo'</span>: <span class=hljs-string>'bar'</span>}).forEach((key, value) {\\n  <span class=hljs-comment>//</span>\\n});\\n\\n<span class=hljs-keyword>while</span> (a &#60 <span class=hljs-number>0</span>) {\\n  <span class=hljs-comment>//</span>\\n}\\n</code></pre></div><h3 id=class><div align=center>Class</div></h3><div class=c-markdown-code-compare><pre><code class=language-js><span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Greeter</span> <span class=hljs-keyword>extends</span> <span class=hljs-title>BaseGreeter</span> </span>{\\n  greetCount = <span class=hljs-number>0</span>\\n\\n  <span class=hljs-keyword>constructor</span>(name) {\\n    <span class=hljs-keyword>this</span>.name = name\\n  }\\n  greet({ loud = <span class=hljs-literal>false</span> } = {}) {\\n    <span class=hljs-keyword>this</span>.greetCount += <span class=hljs-number>1</span>\\n    <span class=hljs-keyword>if</span> (loud) {\\n      <span class=hljs-built_in>console</span>.log(<span class=hljs-string>`HELLO <span class=hljs-subst>${<span class=hljs-keyword>this</span>.name.toUpperCase()}</span>!`</span>)\\n    } <span class=hljs-keyword>else</span> {\\n      <span class=hljs-built_in>console</span>.log(<span class=hljs-string>`Hello <span class=hljs-subst>${<span class=hljs-keyword>this</span>.name}</span>`</span>)\\n    }\\n  }\\n}\\n<span class=hljs-keyword>var</span> g = <span class=hljs-keyword>new</span> Greeter(<span class=hljs-string>'Fred'</span>)\\ng.greet() <span class=hljs-comment>// Hello Fred</span>\\ng.greet({<span class=hljs-attr>loud</span>: <span class=hljs-literal>true</span>}) <span class=hljs-comment>// HELLO FRED!</span>\\n<span class=hljs-built_in>console</span>.log(g.greetCount) <span class=hljs-comment>// 2</span>\\n</code></pre><pre><code class=language-dart><span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Greeter</span> <span class=hljs-keyword>extends</span> <span class=hljs-title>BaseGreeter</span> </span>{\\n  <span class=hljs-built_in>int</span> greetCount = <span class=hljs-number>0</span>;\\n  <span class=hljs-built_in>String</span> name;\\n\\n  Greeter(<span class=hljs-keyword>this</span>.name); <span class=hljs-comment>// sugar syntax para `this.name = name`</span>\\n\\n  <span class=hljs-keyword>void</span> greet({ loud = <span class=hljs-keyword>false</span> }) {\\n    greetCount += <span class=hljs-number>1</span>;\\n    <span class=hljs-keyword>if</span> (loud) {\\n      <span class=hljs-built_in>print</span>(<span class=hljs-string>'HELLO <span class=hljs-subst>${name.toUpperCase()}</span>!'</span>);\\n    } <span class=hljs-keyword>else</span> {\\n      <span class=hljs-built_in>print</span>(<span class=hljs-string>'Hello <span class=hljs-subst>${name}</span>'</span>);\\n    }\\n  }\\n}\\nGreeter g = Greeter(<span class=hljs-string>'Fred'</span>);\\ng.greet(); <span class=hljs-comment>// Hello Fred</span>\\ng.greet(loud: <span class=hljs-keyword>true</span>); <span class=hljs-comment>// HELLO FRED!</span>\\n<span class=hljs-built_in>print</span>(g.greetCount); <span class=hljs-comment>// 2</span>\\n</code></pre></div><h3 id=null><div align=center>Null</div></h3><p>En Javascript tenemos <code>null</code> y <code>undefined</code>, en Dart solo tenemos <code>null</code>.<div class=c-markdown-code-compare><pre><code class=language-js><span class=hljs-built_in>console</span>.log(<span class=hljs-literal>null</span>)\\n<span class=hljs-built_in>console</span>.log(<span class=hljs-literal>undefined</span>)\\n</code></pre><pre><code class=language-dart><span class=hljs-built_in>print</span>(<span class=hljs-keyword>null</span>);\\n\\n</code></pre></div><h3 id=modules><div align=center>Modules</div></h3><p>En Dart, cuando importas un modulo, todos sus miembros (variables, classes, funciones, etc.) estaran disponibles en el ambito global, a menos que la libreria haya definido un <code>namespace</code> o tu crees un <code>namespace</code> con el keyword <code>as</code> al momento de importar.<div class=c-markdown-code-compare><pre><code class=language-js><span class=hljs-comment>// project structure</span>\\n<span class=hljs-comment>//</span>\\n<span class=hljs-comment>// ├── project1</span>\\n<span class=hljs-comment>// │   └── index.js</span>\\n<span class=hljs-comment>// └── project2</span>\\n<span class=hljs-comment>//     ├── main.js</span>\\n<span class=hljs-comment>//     └── package1</span>\\n<span class=hljs-comment>//         ├── index.js</span>\\n<span class=hljs-comment>//         ├── module1.js</span>\\n<span class=hljs-comment>//         └── subpackage1</span>\\n<span class=hljs-comment>//             └── module2.js</span>\\n\\n<span class=hljs-comment>// project1/index.js</span>\\n\\n\\n<span class=hljs-keyword>export</span> <span class=hljs-keyword>const</span> somethingMore = <span class=hljs-string>'...'</span>\\n\\n<span class=hljs-comment>// project2/main.js</span>\\n\\n<span class=hljs-keyword>import</span> os <span class=hljs-keyword>from</span> <span class=hljs-string>'os'</span> <span class=hljs-comment>// standard library import</span>\\n<span class=hljs-keyword>import</span> {Flask} <span class=hljs-keyword>from</span> <span class=hljs-string>'flask'</span> <span class=hljs-comment>// third party import</span>\\n<span class=hljs-keyword>import</span> * <span class=hljs-keyword>as</span> package1 <span class=hljs-keyword>from</span> <span class=hljs-string>'./package1'</span> <span class=hljs-comment>// relative import with alias</span>\\n<span class=hljs-keyword>import</span> * <span class=hljs-keyword>as</span> myModule <span class=hljs-keyword>from</span> <span class=hljs-string>'./package1/module1.js'</span> <span class=hljs-comment>// relative import with alias</span>\\n</code></pre><pre><code class=language-dart><span class=hljs-comment>// project structure</span>\\n<span class=hljs-comment>//</span>\\n<span class=hljs-comment>// ├── project1</span>\\n<span class=hljs-comment>// │   └── main.dart</span>\\n<span class=hljs-comment>// └── project2</span>\\n<span class=hljs-comment>//     ├── main.dart</span>\\n<span class=hljs-comment>//     └── package1</span>\\n<span class=hljs-comment>//         ├── main.dart</span>\\n<span class=hljs-comment>//         ├── module1.dart</span>\\n<span class=hljs-comment>//         └── subpackage1</span>\\n<span class=hljs-comment>//             └── module2.dart</span>\\n\\n<span class=hljs-comment>// project1/main.dart</span>\\n\\n<span class=hljs-keyword>library</span> project1; <span class=hljs-comment>// namespace</span>\\n<span class=hljs-keyword>var</span> something_more = <span class=hljs-string>'...'</span>;\\n\\n<span class=hljs-comment>// project2/main.dart</span>\\n\\n<span class=hljs-keyword>import</span> <span class=hljs-string>'dart:math'</span> <span class=hljs-keyword>as</span> math; <span class=hljs-comment>// standard library import with namespace</span>\\n<span class=hljs-keyword>import</span> <span class=hljs-string>'package:get_it/get_it.dart'</span>; <span class=hljs-comment>// third party import</span>\\n<span class=hljs-keyword>import</span> <span class=hljs-string>'./package1/main.dart'</span> <span class=hljs-keyword>as</span> package1; <span class=hljs-comment>// relative import with namespace</span>\\n<span class=hljs-keyword>import</span> <span class=hljs-string>'../project1/main.dart'</span>; <span class=hljs-comment>// relative import without namespace</span>\\n</code></pre></div><h2 id=solo-en-dart>Solo en Dart</h2><p>Algunos features que tiene Dart pero no Javascript.<h3 id=enum><div align=center>Enum</div></h3><pre><code class=language-dart><span class=hljs-keyword>enum</span> Color = { red, green };\\n</code></pre><h2 id=referencias>Referencias</h2><ul><li><a href=https://medium.com/jay-tillu/operators-in-dart-5a774aff0788 rel=nofollow target=_blank>https://medium.com/jay-tillu/operators-in-dart-5a774aff0788</a><li><a href=http://blog.sethladd.com/2012/02/booleans-in-dart.html rel=nofollow target=_blank>http://blog.sethladd.com/2012/02/booleans-in-dart.html</a><li><a href=https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(list_comprehension)#Dart rel=nofollow target=_blank>https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(list_comprehension)#Dart</a><li><a href=https://bezkoder.com/dart-map/ rel=nofollow target=_blank>https://bezkoder.com/dart-map/</a><li><a href=https://subscription.packtpub.com/book/web_development/9781783989560/1/ch01lvl1sec08/modularity-and-a-namespace rel=nofollow target=_blank>https://subscription.packtpub.com/book/web_development/9781783989560/1/ch01lvl1sec08/modularity-and-a-namespace</a></ul>\"}"],"sourceRoot":""}